func none stdin
    asm
get_char:
    push rcx
    push rax
    push rdi
    push rsi
    push rdx
    push rbx

    mov rax, 0      ; syscall for sysread
    mov rdi, 0      ; stdin file descriptor
    mov rsi, rsp    ; bytes to write (by reference?)
    mov rdx, 1      ; number of bytes to write
    syscall         ; call syscall

    pop rbx
    pop rdx
    pop rsi
    pop rdi
    pop rax
    pop rcx
    ret

get_num:
    xor rax, rax
    get_num_loop:
    mov rcx, 10
    call get_char
    cmp bl, 0x0a
    je fi_get_num
    cmp bl, 0x20
    je fi_get_num
    
    sub rbx, 48
    mul rcx
    
    add rax, rbx
    jmp get_num_loop

    fi_get_num:
    ret

    asm

func u64 sum u64 n
    def u64 i = 1
    def u64 max = 0
    def u64 sum = 0
    def u64 temp = 0

    mod max = n / 2
    while i <= max {
        mod temp = n % i
        if temp == 0 {
            mod sum = sum + i
        }
        
        mod i = i + 1
    }
    mod sum = sum + n
    return sum

func none main
    def u64 n = 0
    def u64 i = 1
    def u64 sum = 0
    def u64 temp = 0
    def u64 n2 = 0


    asm 
        call get_num
    asm

    store rax n

    while i <= n {
        mod temp = call sum i
        mod sum = sum + temp
        if n <= 1000000007 {
            mod sum = sum % 1000000007
        }
        mod i = i + 1
    }

    call print_u64 sum
    
       